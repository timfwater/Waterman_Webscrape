version
x = 1
x
x
pwd
wd
setwd("~/Desktop")
install.packages("caret")
library(caret)
y = 4
y+x
lo(100)
log(100)
log(10, 100)
log(base = 10, x = 100)
#using keywords w functions to specify
#factor datatypes -- categorical variables, number or string
2
class(2)
#2 is a vector -- with numeric values
# %% remainder in R: % in python
#everything in python a class??
#py object in class?
get wd
getwd()
?lm
f = 'Hello I am'
h = 'Tim'
cat(f,h)
-3 ^ (5/2)
-3 ^ (2.5)
x_1 = rnorm(10)
x_1
#return to class
as.integer(4.7)
s = '4.5'
class(s)
as.numeric(s)
class(s)
j = as.numeric(s)
class(j)
#s 35-36 seq() rnorm() sample()
rnorm(15)
hist(rnorm(15))
hist(rnorm(1000))
hist(runif(100))
#runif - does a uniform distribution?
hist(runif(1000))
hist(rnorm(1000))
hist(rnorm(1000))
hist(rnorm(1000))
hist(runif(1000))
#s 37 rep()
rep(c(3,4,5), 4)
rep(c(3,4,5), each=4)
rep(c(3,4,5), time = 4)
#modifying vector s41 -- assigning new values within an existing vector
v = 10:15
v[1] = 20
v
#s42 naming vectors -- providing a corresponding name to each element of vector
v
names(v) = c('a', 'b', 'c', 'd', 'e')
v
# names like a key
#s45 functions on vectors -- act differently
v1 = c(1, 12, 17, 19, 100)
v1_max = max(v_1)
v1_max = max(v1)
v1_min = min(v1)
vtrim = v1[v1 < v1_max & v1_min < v1]
vtrim
mean(vtrim)
temp = c(27, 29, 23, 14, NA)
mean(temp, na.rm=TRUE)
getwd
getwd()
x = '8'
x = ('8')
x
class(x)
x + 1
z = as.numeric(x)
z + 1
p = rnorm(5)
p
x_1 = rnorm(5)
x_2 = seq(1,10)
x_2
x_3 = x_2[1:5]
x_3
my_sum = x_1 + x_2
my_sum
x_1[1]*x_1[3]
x_1 + c(1,2)
#ls function -- list all variables you have
ls
#rm(list = ls())
vector1 <- 1:4
vector2 <- 5:8
vector3 <- 9:12
cbind(vector1)
w = cbind(vector1, vector2, vector3)
w
w[2][2]
w[2,2]
w[1,3]
w[,3,drop=F]
#drop = F means keep the matrix structure of extracting from matrix
my_mat = matrix(1:12, 4, 3)
my_mat + c(1,2,3)
#if add vector to matrix, will add along COLUMNS- NOT rows
a <- array(1:24, dim = c(3, 4, 2))
a
#higher dimensions through arrays
#matricies do NOT use dot product?
city = c('Seattle', 'Chicago', 'Boston', 'Houston')
temp = c(78, 74, 50, 104)
citydf = data.frame(city, temp)
citydf
colnames(citydf) = c('CITY', 'TEMP')
citydf
citydf2 = data.frame(city, temp, row.names=c('a', 'b', 'c', 'd'))
citydf2
citydf2[1,2]
citydf2[3,]
#select row -- give dataframe. select column -- give vector
df[ ,1]
citydf[,1]
citydf[,'city']
citydf
citydf[,'CITY']
sitydf$CITY
citydf$CITY
dim(citydf)
#str means structure- NOT string
str(citydf)
#dim() dimensions
#head(x, n)
#summary(x) gives stat breakdown of input
x = 3:7
class(x)
summary(x)
dim(x)
y = as.factor(x)
y
as.numeric(y)
z = 3:7
j = as.factor(z)
str(j)
as.numeric(as.character(j))
#unclear of above s 96
order(citydf$TEMP)
citydf(order(citydf$TEMP))
citydf[order(citydf$TEMP),]
#order just gives you index ordering -- have to apply to dataframe for result
#order will return by the column you specify -- but only RETURNS the indicies' ordered index
#s98 writing/opening csv files
write.csv(citydf, file='R1_lecture_code.csv', row.names=F)
getwd()
m = read.csv('R1_lecture_code.csv')
m
setwd("~/Desktop/PTR/PTRO")
library(readr)
DEOO <- read_csv("~/Desktop/DEO/DEOO/DEOO.csv")
View(DEOO)
DEOO_test = DEOO
head(DEOO_test)
DEOO_test_date = split(DEOO_test, DEOO_test$Date)
d = DEOO_test$Date
e = substring(d,9,12)
head(e)
combined = cbind(DEOO$Title, e)
head(combined)
f = strsplit(d, split = ' ')
head(f)
g = f[,3]
h = f[[1]]
head(h)
h[1]
h[3]
h[3:1278,3]
i = as.Date(DEOO$Date, format='%m/%d/%Y')
head(i)
i = as.Date(DEOO$Date, format='%b %d, %Y')
head(i)
class(i)
import lubridate
library(lubridate)
year(i)
j = year(i)
head(j)
by_year = cbind(DEOO, j)
head(by_year)
